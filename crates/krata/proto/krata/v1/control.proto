syntax = "proto3";

package krata.v1.control;

option java_multiple_files = true;
option java_package = "dev.krata.proto.v1.control";
option java_outer_classname = "ControlProto";

import "krata/bus/idm.proto";
import "krata/v1/common.proto";

service ControlService {
    rpc CreateGuest(CreateGuestRequest) returns (CreateGuestReply);
    rpc DestroyGuest(DestroyGuestRequest) returns (DestroyGuestReply);
    rpc ResolveGuest(ResolveGuestRequest) returns (ResolveGuestReply);
    rpc ListGuests(ListGuestsRequest) returns (ListGuestsReply);

    rpc ConsoleData(stream ConsoleDataRequest) returns (stream ConsoleDataReply);
    rpc ReadGuestMetrics(ReadGuestMetricsRequest) returns (ReadGuestMetricsReply);
    
    rpc SnoopIdm(SnoopIdmRequest) returns (stream SnoopIdmReply);
    rpc WatchEvents(WatchEventsRequest) returns (stream WatchEventsReply);

    rpc PullImage(PullImageRequest) returns (stream PullImageReply);
}

message CreateGuestRequest {
    krata.v1.common.GuestSpec spec = 1;
}

message CreateGuestReply {
    string guest_id = 1;
}

message DestroyGuestRequest {
    string guest_id = 1;
}

message DestroyGuestReply {}

message ResolveGuestRequest {
    string name = 1;
}

message ResolveGuestReply {
    krata.v1.common.Guest guest = 1;
}

message ListGuestsRequest {}

message ListGuestsReply {
    repeated krata.v1.common.Guest guests = 1;
}

message ConsoleDataRequest {
    string guest_id = 1;
    bytes data = 2;
}

message ConsoleDataReply {
    bytes data = 1;
}

message WatchEventsRequest {}

message WatchEventsReply {
    oneof event {
        GuestChangedEvent guest_changed = 1;
    }
}

message GuestChangedEvent {
    krata.v1.common.Guest guest = 1;
}

message ReadGuestMetricsRequest {
    string guest_id = 1;
}

message ReadGuestMetricsReply {
    krata.v1.common.GuestMetricNode root = 1;
}

message SnoopIdmRequest {}

message SnoopIdmReply {
    uint32 from = 1;
    uint32 to = 2;
    krata.bus.idm.IdmPacket packet = 3;
}

message ImageProgress {
    ImageProgressPhase phase = 1;
    repeated ImageProgressLayer layers = 2;
    ImageProgressIndication indication = 3;
}

enum ImageProgressPhase {
    IMAGE_PROGRESS_PHASE_UNKNOWN = 0;
    IMAGE_PROGRESS_PHASE_STARTED = 1;
    IMAGE_PROGRESS_PHASE_RESOLVING = 2;
    IMAGE_PROGRESS_PHASE_RESOLVED = 3;
    IMAGE_PROGRESS_PHASE_CONFIG_DOWNLOAD = 4;
    IMAGE_PROGRESS_PHASE_LAYER_DOWNLOAD = 5;
    IMAGE_PROGRESS_PHASE_ASSEMBLE = 6;
    IMAGE_PROGRESS_PHASE_PACK = 7;
    IMAGE_PROGRESS_PHASE_COMPLETE = 8;
}

message ImageProgressLayer {
    string id = 1;
    ImageProgressLayerPhase phase = 2;
    ImageProgressIndication indication = 3;
}

enum ImageProgressLayerPhase {
    IMAGE_PROGRESS_LAYER_PHASE_UNKNOWN = 0;
    IMAGE_PROGRESS_LAYER_PHASE_WAITING = 1;
    IMAGE_PROGRESS_LAYER_PHASE_DOWNLOADING = 2;
    IMAGE_PROGRESS_LAYER_PHASE_DOWNLOADED = 3;
    IMAGE_PROGRESS_LAYER_PHASE_EXTRACTING = 4;
    IMAGE_PROGRESS_LAYER_PHASE_EXTRACTED = 5;
}

message ImageProgressIndication {
    oneof indication {
        ImageProgressIndicationBar bar = 1;
        ImageProgressIndicationSpinner spinner = 2;
        ImageProgressIndicationHidden hidden = 3;
        ImageProgressIndicationCompleted completed = 4;
    }
}

message ImageProgressIndicationBar {
    string message = 1;
    uint64 current = 2;
    uint64 total = 3;
    bool is_bytes = 4;
}

message ImageProgressIndicationSpinner {
    string message = 1;
}

message ImageProgressIndicationHidden {}

message ImageProgressIndicationCompleted {
    string message = 1;
    uint64 total = 2;
    bool is_bytes = 3;
}

message PullImageRequest {
    string image = 1;
    krata.v1.common.OciImageFormat format = 2;
    bool overwrite_cache = 3;
}

message PullImageReply {
    ImageProgress progress = 1;
    string digest = 2;
    krata.v1.common.OciImageFormat format = 3;
}
